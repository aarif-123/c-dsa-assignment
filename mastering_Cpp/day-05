// Ques 1. Given an integer array nums and an integer k, return the kth largest element in the array.
// Note that it is the kth largest element in the sorted order, not the kth distinct element.
// Can you solve it without sorting?

// Example 1:
// Input: nums = [3,2,1,5,6,4], k = 2
// Output: 5
// Example 2:
// Input: nums = [3,2,3,1,2,4,5,5,6], k = 4





#include <iostream>

using namespace std;


void minHeapify(int heap[], int size, int root) {
    int smallest = root;
    int leftChild = 2 * root + 1;
    int rightChild = 2 * root + 2;

    if (leftChild < size && heap[leftChild] < heap[smallest]) {
        smallest = leftChild;
    }
    if (rightChild < size && heap[rightChild] < heap[smallest]) {
        smallest = rightChild;
    }
    if (smallest != root) {
        int temp = heap[root];
        heap[root] = heap[smallest];
        heap[smallest] = temp;
        minHeapify(heap, size, smallest);
    }
}

void createMinHeap(int heap[], int size) {
    for (int i = size / 2 - 1; i >= 0; i--) {
        minHeapify(heap, size, i);
    }
}

int findKthLargest(int nums[], int totalSize, int k) {
    int heap[k];
    for (int i = 0; i < k; ++i) {
        heap[i] = nums[i];
    }

    createMinHeap(heap, k);

    for (int i = k; i < totalSize; ++i) {
        if (nums[i] > heap[0]) {
            heap[0] = nums[i];
            minHeapify(heap, k, 0);
        }
    }
    
    return heap[0];
}

int main() {
    int nums[] = {3, 2, 3, 1, 2, 4, 5, 5, 6};
    int totalSize = sizeof(nums) / sizeof(nums[0]);
    int k = 4;
    int result = findKthLargest(nums, totalSize, k);
    cout << "The " << k << "th largest element is " << result << endl;
    return 0;
}
