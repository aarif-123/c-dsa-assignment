// #include <iostream>
// using namespace std;

// // Node structure for linked list
// struct Node {
//     int data;    // Data to store
//     Node* next;  // Pointer to the next node
// };

// // Stack class implemented using linked list
// class Stack {
// private:
//     Node* top;  // Pointer to the top of the stack

// public:
//     // Constructor to initialize an empty stack
//     Stack() {
//         top = nullptr;  // Top is null initially
//     }

//     // Function to check if the stack is empty
//     bool isEmpty() {
//         return top == nullptr;
//     }

//     // Function to push an element onto the stack
//     void push(int x) {
//         Node* newNode = new Node();  // Create a new node
//         newNode->data = x;           // Set data for the new node
//         newNode->next = top;         // Point new node to the previous top
//         top = newNode;               // Update top to the new node
//     }

//     // Function to pop an element from the stack
//     void pop() {
//         if (isEmpty()) {
//             cout << "Stack underflow. No elements to pop.\n";
//             return;
//         }
//         Node* temp = top;      // Temp pointer to hold the current top
//         top = top->next;       // Move top to the next node
//         delete temp;           // Free memory of the old top node
//     }

//     // Function to get the top element (peek)
//     int peek() {
//         if (isEmpty()) {
//             cout << "Stack is empty.\n";
//             return -1;
//         }
//         return top->data;      // Return the data of the top node
//     }

//     // Function to display the stack elements
//     void display() {
//         if (isEmpty()) {
//             cout << "Stack is empty.\n";
//             return;
//         }
//         Node* temp = top;  // Start from the top
//         while (temp != nullptr) {
//             cout << temp->data << " ";  // Print each element
//             temp = temp->next;          // Move to the next node
//         }
//         cout << endl;
//     }
// };

// int main() {
//     Stack s;   // Create a stack

//     // Push elements onto the stack
//     s.push(10);
//     s.push(20);
//     s.push(30);

//     // Display stack contents
//     cout << "Stack after pushing elements: ";
//     s.display();

//     // Peek at the top element
//     cout << "Top element: " << s.peek() << endl;

//     // Pop an element
//     s.pop();
//     cout << "Stack after popping one element: ";
//     s.display();

//     // Peek again
//     cout << "Top element after pop: " << s.peek() << endl;

//     return 0;
// }
