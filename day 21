// q1


#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* prev;
    Node* next;
    
    // Constructor to create a new node
    Node(int data) {
        this->data = data;
        this->prev = nullptr;
        this->next = nullptr;
    }
};

class DoublyLinkedList {
private:
    Node* head;

public:
    // Constructor to initialize an empty linked list
    DoublyLinkedList() {
        head = nullptr;
    }

    // Function to append a new node at the end
    void append(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }

    // Function to insert a node at a specific position
    void insertAtPosition(int pos, int data) {
        Node* newNode = new Node(data);
        Node* temp = head;

        // If the list is empty or position is 0, insert at the beginning
        if (pos == 0) {
            newNode->next = head;
            if (head != nullptr) {
                head->prev = newNode;
            }
            head = newNode;
            return;
        }

        // Traverse to the position
        for (int i = 0; i < pos - 1; i++) {
            if (temp == nullptr) {
                cout << "Position out of bounds.\n";
                return;
            }
            temp = temp->next;
        }

        // Insert the new node at the specified position
        newNode->next = temp->next;
        if (temp->next != nullptr) {
            temp->next->prev = newNode;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }

    // Function to display the linked list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList dll;

    // Input the linked list: 2 <-> 4 <-> 5
    dll.append(2);
    dll.append(4);
    dll.append(5);

    // Insert value 6 at position 3
    int p = 2, x = 6;
    dll.insertAtPosition(p + 1, x);  // Insert at position 3 (0-based)

    // Display the modified linked list
    dll.display();

    return 0;
}


// q2


#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    
    // Constructor to create a new node
    Node(int data) {
        this->data = data;
        this->next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;

public:
    // Constructor to initialize an empty linked list
    LinkedList() {
        head = nullptr;
    }

    // Function to append a new node at the end
    void append(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    // Function to create a cycle in the linked list at a specific position
    void createCycle(int pos) {
        if (pos == -1) return;  // No cycle needed

        Node* temp = head;
        Node* cycleNode = nullptr;
        int index = 0;

        // Find the node at the specified position
        while (temp->next != nullptr) {
            if (index == pos) {
                cycleNode = temp;
            }
            temp = temp->next;
            index++;
        }

        // Create the cycle
        temp->next = cycleNode;
    }

    // Function to detect a cycle using Floyd's Cycle Detection Algorithm
    bool detectCycle() {
        if (head == nullptr) return false;

        Node* slow = head;
        Node* fast = head;

        // Traverse the linked list
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;           // Move one step
            fast = fast->next->next;     // Move two steps

            // If slow and fast pointers meet, a cycle exists
            if (slow == fast) {
                return true;
            }
        }

        return false;  // No cycle found
    }
};

int main() {
    LinkedList ll;

    // Input: head = [3, 2, 0, -4], pos = 1
    ll.append(3);
    ll.append(2);
    ll.append(0);
    ll.append(-4);

    // Create a cycle at position 1
    int pos = 1;
    ll.createCycle(pos);

    // Detect the cycle
    if (ll.detectCycle()) {
        cout << "true\n";
    } else {
        cout << "false\n";
    }

    return 0;
}
